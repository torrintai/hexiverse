{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/loar/hexiverse/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/home/loar/hexiverse/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/home/loar/hexiverse/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/loar/hexiverse/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _ERROR_DESCRIPTION_MA;\n\nimport _regeneratorRuntime from \"/home/loar/hexiverse/node_modules/@babel/runtime/regenerator/index.js\";\nimport { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\nvar name = \"@firebase/installations\";\nvar version = \"0.5.12\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PENDING_TIMEOUT_MS = 10000;\nvar PACKAGE_VERSION = \"w:\".concat(version);\nvar INTERNAL_AUTH_VERSION = 'FIS_v2';\nvar INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nvar TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nvar SERVICE = 'installations';\nvar SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ERROR_DESCRIPTION_MAP = (_ERROR_DESCRIPTION_MA = {}, _defineProperty(_ERROR_DESCRIPTION_MA, \"missing-app-config-values\"\n/* MISSING_APP_CONFIG_VALUES */\n, 'Missing App configuration value: \"{$valueName}\"'), _defineProperty(_ERROR_DESCRIPTION_MA, \"not-registered\"\n/* NOT_REGISTERED */\n, 'Firebase Installation is not registered.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"installation-not-found\"\n/* INSTALLATION_NOT_FOUND */\n, 'Firebase Installation not found.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"request-failed\"\n/* REQUEST_FAILED */\n, '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"'), _defineProperty(_ERROR_DESCRIPTION_MA, \"app-offline\"\n/* APP_OFFLINE */\n, 'Could not process request. Application offline.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"delete-pending-registration\"\n/* DELETE_PENDING_REGISTRATION */\n, \"Can't delete installation while there is a pending registration request.\"), _ERROR_DESCRIPTION_MA);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint(_ref) {\n  var projectId = _ref.projectId;\n  return \"\".concat(INSTALLATIONS_API_URL, \"/projects/\").concat(projectId, \"/installations\");\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nfunction getErrorFromResponse(_x, _x2) {\n  return _getErrorFromResponse.apply(this, arguments);\n}\n\nfunction _getErrorFromResponse() {\n  _getErrorFromResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestName, response) {\n    var responseJson, errorData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return response.json();\n\n          case 2:\n            responseJson = _context.sent;\n            errorData = responseJson.error;\n            return _context.abrupt(\"return\", ERROR_FACTORY.create(\"request-failed\"\n            /* REQUEST_FAILED */\n            , {\n              requestName: requestName,\n              serverCode: errorData.code,\n              serverMessage: errorData.message,\n              serverStatus: errorData.status\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getErrorFromResponse.apply(this, arguments);\n}\n\nfunction getHeaders(_ref2) {\n  var apiKey = _ref2.apiKey;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, _ref3) {\n  var refreshToken = _ref3.refreshToken;\n  var headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nfunction retryIfServerError(_x3) {\n  return _retryIfServerError.apply(this, arguments);\n}\n\nfunction _retryIfServerError() {\n  _retryIfServerError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fn) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fn();\n\n          case 2:\n            result = _context2.sent;\n\n            if (!(result.status >= 500 && result.status < 600)) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", fn());\n\n          case 5:\n            return _context2.abrupt(\"return\", result);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _retryIfServerError.apply(this, arguments);\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return \"\".concat(INTERNAL_AUTH_VERSION, \" \").concat(refreshToken);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createInstallationRequest(_x4, _x5) {\n  return _createInstallationRequest.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction _createInstallationRequest() {\n  _createInstallationRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4, _ref5) {\n    var appConfig, heartbeatServiceProvider, fid, endpoint, headers, heartbeatService, heartbeatsHeader, body, request, response, responseValue, registeredInstallationEntry;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            appConfig = _ref4.appConfig, heartbeatServiceProvider = _ref4.heartbeatServiceProvider;\n            fid = _ref5.fid;\n            endpoint = getInstallationsEndpoint(appConfig);\n            headers = getHeaders(appConfig); // If heartbeat service exists, add the heartbeat string to the header.\n\n            heartbeatService = heartbeatServiceProvider.getImmediate({\n              optional: true\n            });\n\n            if (!heartbeatService) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 8;\n            return heartbeatService.getHeartbeatsHeader();\n\n          case 8:\n            heartbeatsHeader = _context3.sent;\n\n            if (heartbeatsHeader) {\n              headers.append('x-firebase-client', heartbeatsHeader);\n            }\n\n          case 10:\n            body = {\n              fid: fid,\n              authVersion: INTERNAL_AUTH_VERSION,\n              appId: appConfig.appId,\n              sdkVersion: PACKAGE_VERSION\n            };\n            request = {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify(body)\n            };\n            _context3.next = 14;\n            return retryIfServerError(function () {\n              return fetch(endpoint, request);\n            });\n\n          case 14:\n            response = _context3.sent;\n\n            if (!response.ok) {\n              _context3.next = 23;\n              break;\n            }\n\n            _context3.next = 18;\n            return response.json();\n\n          case 18:\n            responseValue = _context3.sent;\n            registeredInstallationEntry = {\n              fid: responseValue.fid || fid,\n              registrationStatus: 2\n              /* COMPLETED */\n              ,\n              refreshToken: responseValue.refreshToken,\n              authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n            };\n            return _context3.abrupt(\"return\", registeredInstallationEntry);\n\n          case 23:\n            _context3.next = 25;\n            return getErrorFromResponse('Create Installation', response);\n\n          case 25:\n            throw _context3.sent;\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createInstallationRequest.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  var b64 = btoa(String.fromCharCode.apply(String, _toConsumableArray(array)));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nvar INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    var fidByteArray = new Uint8Array(17);\n    var crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 112 + fidByteArray[0] % 16;\n    var fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  var b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return \"\".concat(appConfig.appName, \"!\").concat(appConfig.appId);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  var key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  var callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  var _iterator = _createForOfIteratorHelper(callbacks),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var callback = _step.value;\n      callback(fid);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  var channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key: key,\n      fid: fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nvar broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = function (e) {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DATABASE_NAME = 'firebase-installations-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-installations-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: function upgrade(db, oldVersion) {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction set(_x6, _x7) {\n  return _set.apply(this, arguments);\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction _set() {\n  _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(appConfig, value) {\n    var key, db, tx, objectStore, oldValue;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            key = getKey(appConfig);\n            _context4.next = 3;\n            return getDbPromise();\n\n          case 3:\n            db = _context4.sent;\n            tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n            objectStore = tx.objectStore(OBJECT_STORE_NAME);\n            _context4.next = 8;\n            return objectStore.get(key);\n\n          case 8:\n            oldValue = _context4.sent;\n            _context4.next = 11;\n            return objectStore.put(value, key);\n\n          case 11:\n            _context4.next = 13;\n            return tx.done;\n\n          case 13:\n            if (!oldValue || oldValue.fid !== value.fid) {\n              fidChanged(appConfig, value.fid);\n            }\n\n            return _context4.abrupt(\"return\", value);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _set.apply(this, arguments);\n}\n\nfunction remove(_x8) {\n  return _remove.apply(this, arguments);\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nfunction _remove() {\n  _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(appConfig) {\n    var key, db, tx;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            key = getKey(appConfig);\n            _context5.next = 3;\n            return getDbPromise();\n\n          case 3:\n            db = _context5.sent;\n            tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n            _context5.next = 7;\n            return tx.objectStore(OBJECT_STORE_NAME).delete(key);\n\n          case 7:\n            _context5.next = 9;\n            return tx.done;\n\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _remove.apply(this, arguments);\n}\n\nfunction update(_x9, _x10) {\n  return _update.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nfunction _update() {\n  _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(appConfig, updateFn) {\n    var key, db, tx, store, oldValue, newValue;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            key = getKey(appConfig);\n            _context6.next = 3;\n            return getDbPromise();\n\n          case 3:\n            db = _context6.sent;\n            tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n            store = tx.objectStore(OBJECT_STORE_NAME);\n            _context6.next = 8;\n            return store.get(key);\n\n          case 8:\n            oldValue = _context6.sent;\n            newValue = updateFn(oldValue);\n\n            if (!(newValue === undefined)) {\n              _context6.next = 15;\n              break;\n            }\n\n            _context6.next = 13;\n            return store.delete(key);\n\n          case 13:\n            _context6.next = 17;\n            break;\n\n          case 15:\n            _context6.next = 17;\n            return store.put(newValue, key);\n\n          case 17:\n            _context6.next = 19;\n            return tx.done;\n\n          case 19:\n            if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n              fidChanged(appConfig, newValue.fid);\n            }\n\n            return _context6.abrupt(\"return\", newValue);\n\n          case 21:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _update.apply(this, arguments);\n}\n\nfunction getInstallationEntry(_x11) {\n  return _getInstallationEntry.apply(this, arguments);\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction _getInstallationEntry() {\n  _getInstallationEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(installations) {\n    var registrationPromise, installationEntry;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return update(installations.appConfig, function (oldEntry) {\n              var installationEntry = updateOrCreateInstallationEntry(oldEntry);\n              var entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n              registrationPromise = entryWithPromise.registrationPromise;\n              return entryWithPromise.installationEntry;\n            });\n\n          case 2:\n            installationEntry = _context7.sent;\n\n            if (!(installationEntry.fid === INVALID_FID)) {\n              _context7.next = 8;\n              break;\n            }\n\n            _context7.next = 6;\n            return registrationPromise;\n\n          case 6:\n            _context7.t0 = _context7.sent;\n            return _context7.abrupt(\"return\", {\n              installationEntry: _context7.t0\n            });\n\n          case 8:\n            return _context7.abrupt(\"return\", {\n              installationEntry: installationEntry,\n              registrationPromise: registrationPromise\n            });\n\n          case 9:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getInstallationEntry.apply(this, arguments);\n}\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  var entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry: installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    var inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    var registrationPromise = registerInstallation(installations, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise: registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry: installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return {\n      installationEntry: installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nfunction registerInstallation(_x12, _x13) {\n  return _registerInstallation.apply(this, arguments);\n}\n/** Call if FID registration is pending in another request. */\n\n\nfunction _registerInstallation() {\n  _registerInstallation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(installations, installationEntry) {\n    var registeredInstallationEntry;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return createInstallationRequest(installations, installationEntry);\n\n          case 3:\n            registeredInstallationEntry = _context8.sent;\n            return _context8.abrupt(\"return\", set(installations.appConfig, registeredInstallationEntry));\n\n          case 7:\n            _context8.prev = 7;\n            _context8.t0 = _context8[\"catch\"](0);\n\n            if (!(isServerError(_context8.t0) && _context8.t0.customData.serverCode === 409)) {\n              _context8.next = 14;\n              break;\n            }\n\n            _context8.next = 12;\n            return remove(installations.appConfig);\n\n          case 12:\n            _context8.next = 16;\n            break;\n\n          case 14:\n            _context8.next = 16;\n            return set(installations.appConfig, {\n              fid: installationEntry.fid,\n              registrationStatus: 0\n              /* NOT_STARTED */\n\n            });\n\n          case 16:\n            throw _context8.t0;\n\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 7]]);\n  }));\n  return _registerInstallation.apply(this, arguments);\n}\n\nfunction waitUntilFidRegistration(_x14) {\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction _waitUntilFidRegistration() {\n  _waitUntilFidRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(installations) {\n    var entry, _yield$getInstallatio, installationEntry, registrationPromise;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return updateInstallationRequest(installations.appConfig);\n\n          case 2:\n            entry = _context9.sent;\n\n          case 3:\n            if (!(entry.registrationStatus === 1\n            /* IN_PROGRESS */\n            )) {\n              _context9.next = 11;\n              break;\n            }\n\n            _context9.next = 6;\n            return sleep(100);\n\n          case 6:\n            _context9.next = 8;\n            return updateInstallationRequest(installations.appConfig);\n\n          case 8:\n            entry = _context9.sent;\n            _context9.next = 3;\n            break;\n\n          case 11:\n            if (!(entry.registrationStatus === 0\n            /* NOT_STARTED */\n            )) {\n              _context9.next = 22;\n              break;\n            }\n\n            _context9.next = 14;\n            return getInstallationEntry(installations);\n\n          case 14:\n            _yield$getInstallatio = _context9.sent;\n            installationEntry = _yield$getInstallatio.installationEntry;\n            registrationPromise = _yield$getInstallatio.registrationPromise;\n\n            if (!registrationPromise) {\n              _context9.next = 21;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", registrationPromise);\n\n          case 21:\n            return _context9.abrupt(\"return\", installationEntry);\n\n          case 22:\n            return _context9.abrupt(\"return\", entry);\n\n          case 23:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction generateAuthTokenRequest(_x15, _x16) {\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\n\nfunction _generateAuthTokenRequest() {\n  _generateAuthTokenRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref6, installationEntry) {\n    var appConfig, heartbeatServiceProvider, endpoint, headers, heartbeatService, heartbeatsHeader, body, request, response, responseValue, completedAuthToken;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            appConfig = _ref6.appConfig, heartbeatServiceProvider = _ref6.heartbeatServiceProvider;\n            endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n            headers = getHeadersWithAuth(appConfig, installationEntry); // If heartbeat service exists, add the heartbeat string to the header.\n\n            heartbeatService = heartbeatServiceProvider.getImmediate({\n              optional: true\n            });\n\n            if (!heartbeatService) {\n              _context10.next = 9;\n              break;\n            }\n\n            _context10.next = 7;\n            return heartbeatService.getHeartbeatsHeader();\n\n          case 7:\n            heartbeatsHeader = _context10.sent;\n\n            if (heartbeatsHeader) {\n              headers.append('x-firebase-client', heartbeatsHeader);\n            }\n\n          case 9:\n            body = {\n              installation: {\n                sdkVersion: PACKAGE_VERSION,\n                appId: appConfig.appId\n              }\n            };\n            request = {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify(body)\n            };\n            _context10.next = 13;\n            return retryIfServerError(function () {\n              return fetch(endpoint, request);\n            });\n\n          case 13:\n            response = _context10.sent;\n\n            if (!response.ok) {\n              _context10.next = 22;\n              break;\n            }\n\n            _context10.next = 17;\n            return response.json();\n\n          case 17:\n            responseValue = _context10.sent;\n            completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n            return _context10.abrupt(\"return\", completedAuthToken);\n\n          case 22:\n            _context10.next = 24;\n            return getErrorFromResponse('Generate Auth Token', response);\n\n          case 24:\n            throw _context10.sent;\n\n          case 25:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, _ref7) {\n  var fid = _ref7.fid;\n  return \"\".concat(getInstallationsEndpoint(appConfig), \"/\").concat(fid, \"/authTokens:generate\");\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nfunction refreshAuthToken(_x17) {\n  return _refreshAuthToken.apply(this, arguments);\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nfunction _refreshAuthToken() {\n  _refreshAuthToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(installations) {\n    var forceRefresh,\n        tokenPromise,\n        entry,\n        authToken,\n        _args11 = arguments;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            forceRefresh = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : false;\n            _context11.next = 3;\n            return update(installations.appConfig, function (oldEntry) {\n              if (!isEntryRegistered(oldEntry)) {\n                throw ERROR_FACTORY.create(\"not-registered\"\n                /* NOT_REGISTERED */\n                );\n              }\n\n              var oldAuthToken = oldEntry.authToken;\n\n              if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n                // There is a valid token in the DB.\n                return oldEntry;\n              } else if (oldAuthToken.requestStatus === 1\n              /* IN_PROGRESS */\n              ) {\n                // There already is a token request in progress.\n                tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n                return oldEntry;\n              } else {\n                // No token or token expired.\n                if (!navigator.onLine) {\n                  throw ERROR_FACTORY.create(\"app-offline\"\n                  /* APP_OFFLINE */\n                  );\n                }\n\n                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n                tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n                return inProgressEntry;\n              }\n            });\n\n          case 3:\n            entry = _context11.sent;\n\n            if (!tokenPromise) {\n              _context11.next = 10;\n              break;\n            }\n\n            _context11.next = 7;\n            return tokenPromise;\n\n          case 7:\n            _context11.t0 = _context11.sent;\n            _context11.next = 11;\n            break;\n\n          case 10:\n            _context11.t0 = entry.authToken;\n\n          case 11:\n            authToken = _context11.t0;\n            return _context11.abrupt(\"return\", authToken);\n\n          case 13:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _refreshAuthToken.apply(this, arguments);\n}\n\nfunction waitUntilAuthTokenRequest(_x18, _x19) {\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction _waitUntilAuthTokenRequest() {\n  _waitUntilAuthTokenRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(installations, forceRefresh) {\n    var entry, authToken;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return updateAuthTokenRequest(installations.appConfig);\n\n          case 2:\n            entry = _context12.sent;\n\n          case 3:\n            if (!(entry.authToken.requestStatus === 1\n            /* IN_PROGRESS */\n            )) {\n              _context12.next = 11;\n              break;\n            }\n\n            _context12.next = 6;\n            return sleep(100);\n\n          case 6:\n            _context12.next = 8;\n            return updateAuthTokenRequest(installations.appConfig);\n\n          case 8:\n            entry = _context12.sent;\n            _context12.next = 3;\n            break;\n\n          case 11:\n            authToken = entry.authToken;\n\n            if (!(authToken.requestStatus === 0\n            /* NOT_STARTED */\n            )) {\n              _context12.next = 16;\n              break;\n            }\n\n            return _context12.abrupt(\"return\", refreshAuthToken(installations, forceRefresh));\n\n          case 16:\n            return _context12.abrupt(\"return\", authToken);\n\n          case 17:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    var oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nfunction fetchAuthTokenFromServer(_x20, _x21) {\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\n\nfunction _fetchAuthTokenFromServer() {\n  _fetchAuthTokenFromServer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(installations, installationEntry) {\n    var authToken, updatedInstallationEntry, _updatedInstallationEntry;\n\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.prev = 0;\n            _context13.next = 3;\n            return generateAuthTokenRequest(installations, installationEntry);\n\n          case 3:\n            authToken = _context13.sent;\n            updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n              authToken: authToken\n            });\n            _context13.next = 7;\n            return set(installations.appConfig, updatedInstallationEntry);\n\n          case 7:\n            return _context13.abrupt(\"return\", authToken);\n\n          case 10:\n            _context13.prev = 10;\n            _context13.t0 = _context13[\"catch\"](0);\n\n            if (!(isServerError(_context13.t0) && (_context13.t0.customData.serverCode === 401 || _context13.t0.customData.serverCode === 404))) {\n              _context13.next = 17;\n              break;\n            }\n\n            _context13.next = 15;\n            return remove(installations.appConfig);\n\n          case 15:\n            _context13.next = 20;\n            break;\n\n          case 17:\n            _updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n              authToken: {\n                requestStatus: 0\n                /* NOT_STARTED */\n\n              }\n            });\n            _context13.next = 20;\n            return set(installations.appConfig, _updatedInstallationEntry);\n\n          case 20:\n            throw _context13.t0;\n\n          case 21:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13, null, [[0, 10]]);\n  }));\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  var now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  var inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nfunction _getId2(_x22) {\n  return _getId.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\n\n\nfunction _getId() {\n  _getId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(installations) {\n    var installationsImpl, _yield$getInstallatio2, installationEntry, registrationPromise;\n\n    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            installationsImpl = installations;\n            _context14.next = 3;\n            return getInstallationEntry(installationsImpl);\n\n          case 3:\n            _yield$getInstallatio2 = _context14.sent;\n            installationEntry = _yield$getInstallatio2.installationEntry;\n            registrationPromise = _yield$getInstallatio2.registrationPromise;\n\n            if (registrationPromise) {\n              registrationPromise.catch(console.error);\n            } else {\n              // If the installation is already registered, update the authentication\n              // token if needed.\n              refreshAuthToken(installationsImpl).catch(console.error);\n            }\n\n            return _context14.abrupt(\"return\", installationEntry.fid);\n\n          case 8:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _getId.apply(this, arguments);\n}\n\nfunction _getToken2(_x23) {\n  return _getToken.apply(this, arguments);\n}\n\nfunction _getToken() {\n  _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(installations) {\n    var forceRefresh,\n        installationsImpl,\n        authToken,\n        _args15 = arguments;\n    return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            forceRefresh = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : false;\n            installationsImpl = installations;\n            _context15.next = 4;\n            return completeInstallationRegistration(installationsImpl);\n\n          case 4:\n            _context15.next = 6;\n            return refreshAuthToken(installationsImpl, forceRefresh);\n\n          case 6:\n            authToken = _context15.sent;\n            return _context15.abrupt(\"return\", authToken.token);\n\n          case 8:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _getToken.apply(this, arguments);\n}\n\nfunction completeInstallationRegistration(_x24) {\n  return _completeInstallationRegistration.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _completeInstallationRegistration() {\n  _completeInstallationRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(installations) {\n    var _yield$getInstallatio3, registrationPromise;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.next = 2;\n            return getInstallationEntry(installations);\n\n          case 2:\n            _yield$getInstallatio3 = _context16.sent;\n            registrationPromise = _yield$getInstallatio3.registrationPromise;\n\n            if (!registrationPromise) {\n              _context16.next = 7;\n              break;\n            }\n\n            _context16.next = 7;\n            return registrationPromise;\n\n          case 7:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _completeInstallationRegistration.apply(this, arguments);\n}\n\nfunction deleteInstallationRequest(_x25, _x26) {\n  return _deleteInstallationRequest.apply(this, arguments);\n}\n\nfunction _deleteInstallationRequest() {\n  _deleteInstallationRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(appConfig, installationEntry) {\n    var endpoint, headers, request, response;\n    return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            endpoint = getDeleteEndpoint(appConfig, installationEntry);\n            headers = getHeadersWithAuth(appConfig, installationEntry);\n            request = {\n              method: 'DELETE',\n              headers: headers\n            };\n            _context17.next = 5;\n            return retryIfServerError(function () {\n              return fetch(endpoint, request);\n            });\n\n          case 5:\n            response = _context17.sent;\n\n            if (response.ok) {\n              _context17.next = 10;\n              break;\n            }\n\n            _context17.next = 9;\n            return getErrorFromResponse('Delete Installation', response);\n\n          case 9:\n            throw _context17.sent;\n\n          case 10:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _deleteInstallationRequest.apply(this, arguments);\n}\n\nfunction getDeleteEndpoint(appConfig, _ref8) {\n  var fid = _ref8.fid;\n  return \"\".concat(getInstallationsEndpoint(appConfig), \"/\").concat(fid);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nfunction deleteInstallations(_x27) {\n  return _deleteInstallations.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\n\n\nfunction _deleteInstallations() {\n  _deleteInstallations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(installations) {\n    var appConfig, entry;\n    return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            appConfig = installations.appConfig;\n            _context18.next = 3;\n            return update(appConfig, function (oldEntry) {\n              if (oldEntry && oldEntry.registrationStatus === 0\n              /* NOT_STARTED */\n              ) {\n                // Delete the unregistered entry without sending a deleteInstallation request.\n                return undefined;\n              }\n\n              return oldEntry;\n            });\n\n          case 3:\n            entry = _context18.sent;\n\n            if (!entry) {\n              _context18.next = 18;\n              break;\n            }\n\n            if (!(entry.registrationStatus === 1\n            /* IN_PROGRESS */\n            )) {\n              _context18.next = 9;\n              break;\n            }\n\n            throw ERROR_FACTORY.create(\"delete-pending-registration\"\n            /* DELETE_PENDING_REGISTRATION */\n            );\n\n          case 9:\n            if (!(entry.registrationStatus === 2\n            /* COMPLETED */\n            )) {\n              _context18.next = 18;\n              break;\n            }\n\n            if (navigator.onLine) {\n              _context18.next = 14;\n              break;\n            }\n\n            throw ERROR_FACTORY.create(\"app-offline\"\n            /* APP_OFFLINE */\n            );\n\n          case 14:\n            _context18.next = 16;\n            return deleteInstallationRequest(appConfig, entry);\n\n          case 16:\n            _context18.next = 18;\n            return remove(appConfig);\n\n          case 18:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee18);\n  }));\n  return _deleteInstallations.apply(this, arguments);\n}\n\nfunction onIdChange(installations, callback) {\n  var appConfig = installations.appConfig;\n  addCallback(appConfig, callback);\n  return function () {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getInstallations() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n\n  var installationsImpl = _getProvider(app, 'installations').getImmediate();\n\n  return installationsImpl;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  var configKeys = ['projectId', 'apiKey', 'appId'];\n\n  for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {\n    var keyName = _configKeys[_i];\n\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName: valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INSTALLATIONS_NAME = 'installations';\nvar INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nvar publicFactory = function publicFactory(container) {\n  var app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n  var appConfig = extractAppConfig(app);\n\n  var heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  var installationsImpl = {\n    app: app,\n    appConfig: appConfig,\n    heartbeatServiceProvider: heartbeatServiceProvider,\n    _delete: function _delete() {\n      return Promise.resolve();\n    }\n  };\n  return installationsImpl;\n};\n\nvar internalFactory = function internalFactory(container) {\n  var app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.\n\n  var installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  var installationsInternal = {\n    getId: function getId() {\n      return _getId2(installations);\n    },\n    getToken: function getToken(forceRefresh) {\n      return _getToken2(installations, forceRefresh);\n    }\n  };\n  return installationsInternal;\n};\n\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n}\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterInstallations();\nregisterVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, _getId2 as getId, getInstallations, _getToken2 as getToken, onIdChange };","map":{"version":3,"mappings":"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","names":["PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","code","includes","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","json","responseJson","errorData","create","serverCode","serverMessage","message","serverStatus","status","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","getHeaders","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","heartbeatServiceProvider","fid","endpoint","getInstallationsEndpoint","heartbeatService","getImmediate","optional","getHeartbeatsHeader","heartbeatsHeader","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","setTimeout","resolve","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","_a","b64String","substr","getKey","appName","fidChangeCallbacks","Map","key","callFidChangeCallbacks","broadcastFidChange","callback","getBroadcastChannel","callbackSet","get","Set","set","add","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","value","tx","transaction","objectStore","oldValue","put","done","fidChanged","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installations","installationEntry","updateOrCreateInstallationEntry","oldEntry","entryWithPromise","triggerRegistrationIfNecessary","registrationPromise","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","completedAuthToken","refreshAuthToken","forceRefresh","isEntryRegistered","oldAuthToken","isAuthTokenValid","tokenPromise","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","Object","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","installationsImpl","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallations","addCallback","removeCallback","app","getApp","_getProvider","extractAppConfig","options","getMissingValueError","name","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations","_registerComponent","Component","registerVersion"],"sources":["/home/loar/hexiverse/node_modules/@firebase/installations/src/util/constants.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/util/errors.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/functions/common.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/functions/create-installation-request.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/util/sleep.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/helpers/generate-fid.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/util/get-key.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/helpers/fid-changed.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/helpers/idb-manager.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/api/get-id.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/api/get-token.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/functions/delete-installation-request.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/api/delete-installations.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/api/on-id-change.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/api/get-installations.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/helpers/extract-app-config.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/functions/config.ts","/home/loar/hexiverse/node_modules/@firebase/installations/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"]},"metadata":{},"sourceType":"module"}