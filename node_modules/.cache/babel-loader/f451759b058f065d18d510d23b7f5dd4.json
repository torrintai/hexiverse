{"ast":null,"code":"import _slicedToArray from\"/home/loar/hexverse/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useCallback,useEffect,useState}from\"react\";import{useParams}from\"react-router-dom\";import useHttp from\"../../hooks/use-http\";import{getAllComments}from\"../../lib/api\";import LoadingSpinner from\"../UI/LoadingSpinner\";import classes from\"./Comments.module.css\";import NewCommentForm from\"./NewCommentForm\";import CommentsList from'./CommentsList';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Comments=function Comments(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isAddingComment=_useState2[0],setIsAddingComment=_useState2[1];var params=useParams();var quoteId=params.quoteId;var _useHttp=useHttp(getAllComments),sendRequest=_useHttp.sendRequest,status=_useHttp.status,loadedComments=_useHttp.data;useEffect(function(){sendRequest(quoteId);},[quoteId,sendRequest]);var startAddCommentHandler=function startAddCommentHandler(){setIsAddingComment(true);};// the function is wrapped with useCallback to prevent an infinite loop \n// because it a reference to it was used as a dependency in a useEffect fxn in NewComment.jsfile.\nvar addedCommentHandler=useCallback(function(){sendRequest(quoteId);},[sendRequest,quoteId]);var comments;if(status===\"pending\"){comments=/*#__PURE__*/_jsx(\"div\",{className:\"centered\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});};if(status==='completed'&&loadedComments&&loadedComments.length>0){comments=/*#__PURE__*/_jsx(CommentsList,{comments:loadedComments});};if(status==='completed'&&(!loadedComments||loadedComments.length===0)){comments=/*#__PURE__*/_jsx(\"p\",{className:\"centered\",children:\"No comments was added yet!\"});}return/*#__PURE__*/_jsxs(\"section\",{className:classes.comments,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"User Comments\"}),!isAddingComment&&/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:startAddCommentHandler,children:\"Add a Comment\"}),isAddingComment&&/*#__PURE__*/_jsx(NewCommentForm,{quoteId:quoteId,onAddedComment:addedCommentHandler}),/*#__PURE__*/_jsx(\"p\",{children:comments})]});};export default Comments;","map":{"version":3,"sources":["/home/loar/hexverse/src/components/comments/Comments.js"],"names":["useCallback","useEffect","useState","useParams","useHttp","getAllComments","LoadingSpinner","classes","NewCommentForm","CommentsList","Comments","isAddingComment","setIsAddingComment","params","quoteId","sendRequest","status","loadedComments","data","startAddCommentHandler","addedCommentHandler","comments","length"],"mappings":"yGAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,QAAjC,KAAiD,OAAjD,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,MAAOC,CAAAA,cAAP,KAA2B,sBAA3B,CAEA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,cAA8CR,QAAQ,CAAC,KAAD,CAAtD,wCAAOS,eAAP,eAAwBC,kBAAxB,eACA,GAAMC,CAAAA,MAAM,CAAGV,SAAS,EAAxB,CACA,GAAQW,CAAAA,OAAR,CAAoBD,MAApB,CAAQC,OAAR,CAEA,aAAsDV,OAAO,CAACC,cAAD,CAA7D,CAAQU,WAAR,UAAQA,WAAR,CAAqBC,MAArB,UAAqBA,MAArB,CAAmCC,cAAnC,UAA6BC,IAA7B,CAEAjB,SAAS,CAAC,UAAM,CACdc,WAAW,CAACD,OAAD,CAAX,CACD,CAFQ,CAEN,CAACA,OAAD,CAAUC,WAAV,CAFM,CAAT,CAIA,GAAMI,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CACnCP,kBAAkB,CAAC,IAAD,CAAlB,CACD,CAFD,CAIA;AACA;AACA,GAAMQ,CAAAA,mBAAmB,CAAGpB,WAAW,CAAC,UAAM,CAC5Ce,WAAW,CAACD,OAAD,CAAX,CACD,CAFsC,CAEpC,CAACC,WAAD,CAAcD,OAAd,CAFoC,CAAvC,CAKA,GAAIO,CAAAA,QAAJ,CAEA,GAAIL,MAAM,GAAK,SAAf,CAA0B,CACxBK,QAAQ,cACN,YAAK,SAAS,CAAC,UAAf,uBACE,KAAC,cAAD,IADF,EADF,CAKD,EAED,GAAIL,MAAM,GAAK,WAAX,EAA0BC,cAA1B,EAA4CA,cAAc,CAACK,MAAf,CAAwB,CAAxE,CAA0E,CACxED,QAAQ,cAAG,KAAC,YAAD,EAAc,QAAQ,CAAEJ,cAAxB,EAAX,CACD,EAED,GAAID,MAAM,GAAK,WAAX,GAA2B,CAACC,cAAD,EAAmBA,cAAc,CAACK,MAAf,GAA0B,CAAxE,CAAJ,CAA+E,CAC9ED,QAAQ,cAAG,UAAG,SAAS,CAAC,UAAb,wCAAX,CACA,CAID,mBACE,iBAAS,SAAS,CAAEd,OAAO,CAACc,QAA5B,wBACE,qCADF,CAEG,CAACV,eAAD,eACC,eAAQ,SAAS,CAAC,KAAlB,CAAwB,OAAO,CAAEQ,sBAAjC,2BAHJ,CAOGR,eAAe,eACd,KAAC,cAAD,EACE,OAAO,CAAEG,OADX,CAEE,cAAc,CAAEM,mBAFlB,EARJ,cAaE,mBAAIC,QAAJ,EAbF,GADF,CAiBD,CA3DD,CA6DA,cAAeX,CAAAA,QAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  // the function is wrapped with useCallback to prevent an infinite loop \n  // because it a reference to it was used as a dependency in a useEffect fxn in NewComment.jsfile.\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  \n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  };\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0){\n    comments = <CommentsList comments={loadedComments} />\n  };\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n   comments = <p className=\"centered\">No comments was added yet!</p>\n  }\n\n\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      <p>{comments}</p>\n    </section>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}