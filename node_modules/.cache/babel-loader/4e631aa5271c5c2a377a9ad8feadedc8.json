{"ast":null,"code":"import{Fragment,useEffect}from'react';import{useParams,Route,Link,useRouteMatch}from'react-router-dom';import HighlightedQuote from'../components/quotes/HighlightedQuote';import Comments from'../components/comments/Comments';import useHttp from'../hooks/use-http';import{getSingleQuote}from'../lib/api';import LoadingSpinner from'../components/UI/LoadingSpinner';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var QuoteDetail=function QuoteDetail(){var match=useRouteMatch();var params=useParams();var quoteId=params.quoteId;var _useHttp=useHttp(getSingleQuote,true),sendRequest=_useHttp.sendRequest,status=_useHttp.status,loadedQuote=_useHttp.data,error=_useHttp.error;useEffect(function(){sendRequest(quoteId);},[sendRequest,quoteId]);if(status==='pending'){return/*#__PURE__*/_jsx(\"div\",{className:\"centered\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});}if(error){return/*#__PURE__*/_jsx(\"p\",{className:\"centered\",children:error});}if(!loadedQuote.text){return/*#__PURE__*/_jsx(\"p\",{children:\"No quote found!\"});}return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(HighlightedQuote,{text:loadedQuote.text,author:loadedQuote.author}),/*#__PURE__*/_jsx(Route,{path:match.path,exact:true,children:/*#__PURE__*/_jsx(\"div\",{className:\"centered\",children:/*#__PURE__*/_jsx(Link,{className:\"btn--flat\",to:\"\".concat(match.url,\"/comments\"),children:\"Load Comments\"})})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(match.path,\"/comments\"),children:/*#__PURE__*/_jsx(Comments,{})})]});};export default QuoteDetail;","map":{"version":3,"sources":["/home/loar/hexverse/src/pages/QuoteDetail.js"],"names":["Fragment","useEffect","useParams","Route","Link","useRouteMatch","HighlightedQuote","Comments","useHttp","getSingleQuote","LoadingSpinner","QuoteDetail","match","params","quoteId","sendRequest","status","loadedQuote","data","error","text","author","path","url"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,SAAT,CAAoBC,KAApB,CAA2BC,IAA3B,CAAiCC,aAAjC,KAAsD,kBAAtD,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,uCAA7B,CACA,MAAOC,CAAAA,QAAP,KAAqB,iCAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,OAASC,cAAT,KAA+B,YAA/B,CACA,MAAOC,CAAAA,cAAP,KAA2B,iCAA3B,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAMC,CAAAA,KAAK,CAAGP,aAAa,EAA3B,CACA,GAAMQ,CAAAA,MAAM,CAAGX,SAAS,EAAxB,CAEA,GAAQY,CAAAA,OAAR,CAAoBD,MAApB,CAAQC,OAAR,CAEA,aAA0DN,OAAO,CAC/DC,cAD+D,CAE/D,IAF+D,CAAjE,CAAQM,WAAR,UAAQA,WAAR,CAAqBC,MAArB,UAAqBA,MAArB,CAAmCC,WAAnC,UAA6BC,IAA7B,CAAgDC,KAAhD,UAAgDA,KAAhD,CAKAlB,SAAS,CAAC,UAAM,CACdc,WAAW,CAACD,OAAD,CAAX,CACD,CAFQ,CAEN,CAACC,WAAD,CAAcD,OAAd,CAFM,CAAT,CAIA,GAAIE,MAAM,GAAK,SAAf,CAA0B,CACxB,mBACE,YAAK,SAAS,CAAC,UAAf,uBACE,KAAC,cAAD,IADF,EADF,CAKD,CAED,GAAIG,KAAJ,CAAW,CACT,mBAAO,UAAG,SAAS,CAAC,UAAb,UAAyBA,KAAzB,EAAP,CACD,CAED,GAAI,CAACF,WAAW,CAACG,IAAjB,CAAuB,CACrB,mBAAO,sCAAP,CACD,CAED,mBACE,MAAC,QAAD,yBACE,KAAC,gBAAD,EAAkB,IAAI,CAAEH,WAAW,CAACG,IAApC,CAA0C,MAAM,CAAEH,WAAW,CAACI,MAA9D,EADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAET,KAAK,CAACU,IAAnB,CAAyB,KAAK,KAA9B,uBACE,YAAK,SAAS,CAAC,UAAf,uBACE,KAAC,IAAD,EAAM,SAAS,CAAC,WAAhB,CAA4B,EAAE,WAAKV,KAAK,CAACW,GAAX,aAA9B,2BADF,EADF,EAFF,cASE,KAAC,KAAD,EAAO,IAAI,WAAKX,KAAK,CAACU,IAAX,aAAX,uBACE,KAAC,QAAD,IADF,EATF,GADF,CAeD,CA9CD,CAgDA,cAAeX,CAAAA,WAAf","sourcesContent":["import { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport Comments from '../components/comments/Comments';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(\n    getSingleQuote,\n    true\n  );\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;"]},"metadata":{},"sourceType":"module"}