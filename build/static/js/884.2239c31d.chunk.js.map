{"version":3,"file":"static/js/884.2239c31d.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://multi-page-spa-/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://multi-page-spa-/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react--quotes-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9h8Dh\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__ogBoi\",\"loading\":\"QuoteForm_loading__gyIuQ\",\"control\":\"QuoteForm_control__8SqBM\",\"actions\":\"QuoteForm_actions__I8AC6\"};","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEnteringData, setIsEnteringData] = useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const finishedEnteringDataHandler = () => {\n    setIsEnteringData(false);\n  }\n\n  const formFocusedHandler = () => {\n    setIsEnteringData(true);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEnteringData}\n        message={(location) =>\n          \"Are you sure you want to leave? All your entered data will be lost\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishedEnteringDataHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from \"../lib/api\";\n\nconst NewQuote = () => {\n  const {sendRequest, status} = useHttp(addQuote);\n  const history = useHistory();\n\n  useEffect(() => {\n    if(status === 'completed'){\n      history.push('/quotes');\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getSingleQuote","quoteId","fetch","response","json","ok","Error","loadedQuote","id","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","key","transformedComments","commentObj","push","props","className","classes","children","useState","isEnteringData","setIsEnteringData","authorInputRef","useRef","textInputRef","Fragment","when","location","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","useHttp","history","useHistory","useEffect"],"sourceRoot":""}