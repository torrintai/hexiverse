{"version":3,"file":"static/js/857.15dd462a.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://multi-page-spa-/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://multi-page-spa-/./src/components/comments/Comments.module.css?d88e","webpack://multi-page-spa-/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://multi-page-spa-/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://multi-page-spa-/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react--quotes-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useEffect, useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n  \n  useEffect(()=> {\n    if (status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({commentData:{ text: enteredText }, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  // the function is wrapped with useCallback to prevent an infinite loop \n  // because it a reference to it was used as a dependency in a useEffect fxn in NewComment.jsfile.\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  \n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  };\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0){\n    comments = <CommentsList comments={loadedComments} />\n  };\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n   comments = <p className=\"centered\">No comments was added yet!</p>\n  }\n\n\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      <p>{comments}</p>\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport Comments from '../components/comments/Comments';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(\n    getSingleQuote,\n    true\n  );\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getSingleQuote","quoteId","fetch","response","json","ok","Error","loadedQuote","id","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","key","transformedComments","commentObj","push","props","className","classes","text","author","commentTextRef","useRef","useHttp","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","onSubmit","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","loadedComments","addedCommentHandler","length","onClick","match","useRouteMatch","Fragment","path","exact","to","url"],"sourceRoot":""}